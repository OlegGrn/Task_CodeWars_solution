//?Подключение шрифта ==============================================================================
@mixin font($font_name, $file_name, $weight, $style) {
	@font-face {
		font-family: $font_name;
		font-display: swap;
		src: url("../fonts/#{$file_name}.woff") format("woff"), url("../fonts/#{$file_name}.woff2") format("woff2");
		font-weight: #{$weight};
		font-style: #{$style};
	}
}
//?++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// Z-index
// Хотя технически это всего лишь функция, но я решил ее тоже добавить. В большом проекте бывает трудно уследить
// за всеми значениями индекса, а этот миксин поможет собрать их в одном месте.
// Когда вы захотите использовать z-index, назовите его так же, как ваш класс,
//  и добавьте в ваш файл переменных/настроек,

//  .site-header {

//   z-index: z('site-header');

// }

@function z($name) {
	@if index($z-indexes, $name) {
		@return (length($z-indexes) - index($z-indexes, $name)) + 1;
	} @else {
		@warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
		@return null;
	}
}
$z-indexes: ("outdated-browser", "modal", "site-header", "page-wrapper", "site-footer");

//? Функции перевода едениц измерения ===========================================================================
// rem
// переменная $default определена в style.scss как высота шрифта по умолчанияю 16рх

@function rem($px) {
	//$result: calc(#{$px/ $default + rem});
	$result: $px / $default + rem;
	@return $result;
}
// em
@function em($px, $font) {
	//$result: calc(#{$px/ $default + em});
	$result: $px / $font + em;

	@return $result;
}

// em
@function em1($px) {
	//$result: calc(#{$px/ $default + em});
	$result: $px / $default + em;
	@return $result;
}

//? МОЁ Адаптивное свойство REM REM REM =================================================================

// Тип1 - шкала расчитывается до значания minWidth и нижнего МД. Если происходит прерывание, в точке останова значение не равно
// заданному минимильному значению свойства.
// Тип2 - шкала расчитывается до указанного пользователем минимального размера ширины экрана. Если происходит прерывание,
// в точке останова будет заданное минимальное значение свойства
// Внимание: для Типа2 минимальный размер экрана НЕ должен быть меньше $minWidth

//*НАЗВАНИЕ - НАЧАЛЬНЫЕ РАЗМЕР - МИН РАЗМЕР - ОТ КАКОЙ ШИРИНЫ БЛОКА - ДО КАКОЙ ШИРИНЫ БЛОКА

@mixin REM-property-start-min($name, $start, $min, $minMD: $minWidth, $type: 2) {
	$add_size: $start - $min;
	$val: rem;
	$width: $maxWidthContainer;
	#{$name}: $start / $default + $val; // Начальное объявление свойства

	//* первый тип ==========
	@if ($type == 1) {
		//$minWidth минимальный размер адаптива в файле style.scss
		$scale: $width - $minWidth; // шкала по которой размажется добавочный размер
		// одно деление шкалы
		$pointScale: $add_size / $scale;
		@if (($width > $valueMd2) and ($minMD <= $valueMd2)) {
			@media (max-width: $md1) {
				#{$name}: ($start - ($width - $valueMd2) * $pointScale) / $default + $val;
			}
			@if ($minMD <= $valueMd3) {
				@media (max-width: $md2) {
					#{$name}: ($start - ($width - $valueMd3) * $pointScale) / $default + $val;
				}
				@if ($minMD <= $valueMd4) {
					@media (max-width: $md3) {
						#{$name}: ($start - ($width - $valueMd4) * $pointScale) / $default + $val;
					}
					@if ($minMD <= $valueMd5) {
						@media (max-width: $md4) {
							#{$name}: ($start - ($width - $valueMd5) * $pointScale) / $default + $val;
						}
						@if ($minMD <= $minWidth) {
							@media (max-width: $md5) {
								#{$name}: ($start - ($width - $minWidth) * $pointScale) / $default + $val;
							}
						}
					}
				}
			}
		} @else if(($width > $valueMd3) and ($minMD <= $valueMd3)) {
			@media (max-width: $md1) {
				#{$name}: ($start - ($width - $valueMd3) * $pointScale) / $default + $val;
			}
			@if ($minMD <= $valueMd4) {
				@media (max-width: $md3) {
					#{$name}: ($start - ($width - $valueMd4) * $pointScale) / $default + $val;
				}
				@if ($minMD <= $valueMd5) {
					@media (max-width: $md4) {
						#{$name}: ($start - ($width - $valueMd5) * $pointScale) / $default + $val;
					}
					@if ($minMD <= $minWidth) {
						@media (max-width: $md5) {
							#{$name}: ($start - ($width - $minWidth) * $pointScale) / $default + $val;
						}
					}
				}
			}
		} @else if (($width > $valueMd4) and ($minMD <= $valueMd4)) {
			@media (max-width: $md1) {
				#{$name}: ($start - ($width - $valueMd4) * $pointScale) / $default + $val;
			}
			@if ($minMD <= $valueMd5) {
				@media (max-width: $md4) {
					#{$name}: ($start - ($width - $valueMd5) * $pointScale) / $default + $val;
				}
				@if ($minMD <= $minWidth) {
					@media (max-width: $md5) {
						#{$name}: ($start - ($width - $minWidth) * $pointScale) / $default + $val;
					}
				}
			}
		} @else if (($width > $valueMd5) and ($minMD <= $valueMd5)) {
			@media (max-width: $md1) {
				#{$name}: ($start - ($width - $valueMd5) * $pointScale) / $default + $val;
			}
			@if ($minMD <= $minWidth) {
				@media (max-width: $md5) {
					#{$name}: ($start - ($width - $minWidth) * $pointScale) / $default + $val;
				}
			}
		}

		//* второй тип	=================
		//!Внимание: для Типа2 минимальный размер экрана НЕ должен быть меньше $minWidth
		//*PXtest-property-start-min($name, $start, $min, $minMD, $type)
	} @else if (($type == 2) and ($minMD >= $minWidth)) {
		//$minWidth минимальный размер адаптива в файле style.scss
		$scale: $width - $minMD; // шкала по которой размажется добавочный размер
		// одно деление шкалы
		$pointScale: $add_size / $scale;

		@if (($width > $valueMd2) and ($minMD <= $valueMd2)) {
			@media (max-width: $md1) {
				#{$name}: ($start - ($width - $valueMd2) * $pointScale) / $default + $val;
			}
			@if ($minMD <= $valueMd3) {
				@media (max-width: $md2) {
					#{$name}: ($start - ($width - $valueMd3) * $pointScale) / $default + $val;
				}
				@if ($minMD <= $valueMd4) {
					@media (max-width: $md3) {
						#{$name}: ($start - ($width - $valueMd4) * $pointScale) / $default + $val;
					}
					@if ($minMD <= $valueMd5) {
						@media (max-width: $md4) {
							#{$name}: ($start - ($width - $valueMd5) * $pointScale) / $default + $val;
						}
						@if ($minMD <= $minWidth) {
							@media (max-width: $md5) {
								#{$name}: ($start - ($width - $minWidth) * $pointScale) / $default + $val;
							}
						}
					} @else if ($minMD > $valueMd5) {
						@media (max-width: $md4) {
							#{$name}: ($start - ($width - $minMD) * $pointScale) / $default + $val;
						}
					}
				} @else if ($minMD > $valueMd4) {
					@media (max-width: $md3) {
						#{$name}: ($start - ($width - $minMD) * $pointScale) / $default + $val;
					}
				}
			} @else if ($minMD > $valueMd3) {
				@media (max-width: $md2) {
					#{$name}: ($start - ($width - $minMD) * $pointScale) / $default + $val;
				}
			}

			//*
		} @else if(($width > $valueMd3) and ($minMD <= $valueMd3)) {
			@media (max-width: $md1) {
				#{$name}: ($start - ($width - $valueMd3) * $pointScale) / $default + $val;
			}
			@if ($minMD <= $valueMd4) {
				@media (max-width: $md3) {
					#{$name}: ($start - ($width - $valueMd4) * $pointScale) / $default + $val;
				}
				@if ($minMD <= $valueMd5) {
					@media (max-width: $md4) {
						#{$name}: ($start - ($width - $valueMd5) * $pointScale) / $default + $val;
					}
					@if ($minMD <= $minWidth) {
						@media (max-width: $md5) {
							#{$name}: ($start - ($width - $minWidth) * $pointScale) / $default + $val;
						}
					}
				} @else if ($minMD > $valueMd5) {
					@media (max-width: $md4) {
						#{$name}: ($start - ($width - $minMD) * $pointScale) / $default + $val;
					}
				}
			} @else if ($minMD > $valueMd4) {
				@media (max-width: $md3) {
					#{$name}: ($start - ($width - $minMD) * $pointScale) / $default + $val;
				}
			}
			//*
		} @else if (($width > $valueMd4) and ($minMD <= $valueMd4)) {
			@media (max-width: $md1) {
				#{$name}: ($start - ($width - $valueMd4) * $pointScale) / $default + $val;
			}
			@if ($minMD <= $valueMd5) {
				@media (max-width: $md4) {
					#{$name}: ($start - ($width - $valueMd5) * $pointScale) / $default + $val;
				}
				@if ($minMD <= $minWidth) {
					@media (max-width: $md5) {
						#{$name}: ($start - ($width - $minWidth) * $pointScale) / $default + $val;
					}
				}
			} @else if ($minMD > $valueMd5) {
				@media (max-width: $md4) {
					#{$name}: ($start - ($width - $minMD) * $pointScale) / $default + $val;
				}
			}
		} @else if (($width > $valueMd5) and ($minMD <= $valueMd5)) {
			@media (max-width: $md1) {
				#{$name}: ($start - ($width - $valueMd5) * $pointScale) / $default + $val;
			}
			@if ($minMD <= $minWidth) {
				@media (max-width: $md5) {
					#{$name}: ($start - ($width - $minWidth) * $pointScale) / $default + $val;
				}
			}
		}
	}
}

//? МОЁ Адаптивное свойство PX PX PX PX =================================================================

// Тип1 - шкала расчитывается до значания minWidth и нижнего МД. Если происходит прерывание, в точке останова значение не равно
// заданному минимильному значению свойства.
// Тип2 - шкала расчитывается до указанного пользователем минимального размера ширины экрана. Если происходит прерывание,
// в точке останова будет заданное минимальное значение свойства
// Внимание: для Типа2 минимальный размер экрана НЕ должен быть меньше $minWidth

//*НАЗВАНИЕ - НАЧАЛЬНЫЕ РАЗМЕР - МИН РАЗМЕР - ОТ КАКОЙ ШИРИНЫ БЛОКА - ДО КАКОЙ ШИРИНЫ БЛОКА

@mixin PX-property-start-min($name, $start, $min, $minMD: $minWidth, $type: 2) {
	$add_size: $start - $min;
	$val: px;
	$width: $maxWidthContainer;
	#{$name}: $start + $val; // Начальное объявление свойства

	//* первый тип ==========
	@if ($type == 1) {
		//$minWidth минимальный размер адаптива в файле style.scss
		$scale: $width - $minWidth; // шкала по которой размажется добавочный размер
		// одно деление шкалы
		$pointScale: $add_size / $scale;
		@if (($width > $valueMd2) and ($minMD <= $valueMd2)) {
			@media (max-width: $md1) {
				#{$name}: ($start - ($width - $valueMd2) * $pointScale) + $val;
			}
			@if ($minMD <= $valueMd3) {
				@media (max-width: $md2) {
					#{$name}: ($start - ($width - $valueMd3) * $pointScale) + $val;
				}
				@if ($minMD <= $valueMd4) {
					@media (max-width: $md3) {
						#{$name}: ($start - ($width - $valueMd4) * $pointScale) + $val;
					}
					@if ($minMD <= $valueMd5) {
						@media (max-width: $md4) {
							#{$name}: ($start - ($width - $valueMd5) * $pointScale) + $val;
						}
						@if ($minMD <= $minWidth) {
							@media (max-width: $md5) {
								#{$name}: ($start - ($width - $minWidth) * $pointScale) + $val;
							}
						}
					}
				}
			}
		} @else if(($width > $valueMd3) and ($minMD <= $valueMd3)) {
			@media (max-width: $md1) {
				#{$name}: ($start - ($width - $valueMd3) * $pointScale) + $val;
			}
			@if ($minMD <= $valueMd4) {
				@media (max-width: $md3) {
					#{$name}: ($start - ($width - $valueMd4) * $pointScale) + $val;
				}
				@if ($minMD <= $valueMd5) {
					@media (max-width: $md4) {
						#{$name}: ($start - ($width - $valueMd5) * $pointScale) + $val;
					}
					@if ($minMD <= $minWidth) {
						@media (max-width: $md5) {
							#{$name}: ($start - ($width - $minWidth) * $pointScale) + $val;
						}
					}
				}
			}
		} @else if (($width > $valueMd4) and ($minMD <= $valueMd4)) {
			@media (max-width: $md1) {
				#{$name}: ($start - ($width - $valueMd4) * $pointScale) + $val;
			}
			@if ($minMD <= $valueMd5) {
				@media (max-width: $md4) {
					#{$name}: ($start - ($width - $valueMd5) * $pointScale) + $val;
				}
				@if ($minMD <= $minWidth) {
					@media (max-width: $md5) {
						#{$name}: ($start - ($width - $minWidth) * $pointScale) + $val;
					}
				}
			}
		} @else if (($width > $valueMd5) and ($minMD <= $valueMd5)) {
			@media (max-width: $md1) {
				#{$name}: ($start - ($width - $valueMd5) * $pointScale) + $val;
			}
			@if ($minMD <= $minWidth) {
				@media (max-width: $md5) {
					#{$name}: ($start - ($width - $minWidth) * $pointScale) + $val;
				}
			}
		}

		//* второй тип	=================
		//!Внимание: для Типа2 минимальный размер экрана НЕ должен быть меньше $minWidth
		//*PXtest-property-start-min($name, $start, $min, $minMD, $type)
	} @else if (($type == 2) and ($minMD >= $minWidth)) {
		//$minWidth минимальный размер адаптива в файле style.scss
		$scale: $width - $minMD; // шкала по которой размажется добавочный размер
		// одно деление шкалы
		$pointScale: $add_size / $scale;

		@if (($width > $valueMd2) and ($minMD <= $valueMd2)) {
			@media (max-width: $md1) {
				#{$name}: ($start - ($width - $valueMd2) * $pointScale) + $val;
			}
			@if ($minMD <= $valueMd3) {
				@media (max-width: $md2) {
					#{$name}: ($start - ($width - $valueMd3) * $pointScale) + $val;
				}
				@if ($minMD <= $valueMd4) {
					@media (max-width: $md3) {
						#{$name}: ($start - ($width - $valueMd4) * $pointScale) + $val;
					}
					@if ($minMD <= $valueMd5) {
						@media (max-width: $md4) {
							#{$name}: ($start - ($width - $valueMd5) * $pointScale) + $val;
						}
						@if ($minMD <= $minWidth) {
							@media (max-width: $md5) {
								#{$name}: ($start - ($width - $minWidth) * $pointScale) + $val;
							}
						}
					} @else if ($minMD > $valueMd5) {
						@media (max-width: $md4) {
							#{$name}: ($start - ($width - $minMD) * $pointScale) + $val;
						}
					}
				} @else if ($minMD > $valueMd4) {
					@media (max-width: $md3) {
						#{$name}: ($start - ($width - $minMD) * $pointScale) + $val;
					}
				}
			} @else if ($minMD > $valueMd3) {
				@media (max-width: $md2) {
					#{$name}: ($start - ($width - $minMD) * $pointScale) + $val;
				}
			}

			//*
		} @else if(($width > $valueMd3) and ($minMD <= $valueMd3)) {
			@media (max-width: $md1) {
				#{$name}: ($start - ($width - $valueMd3) * $pointScale) + $val;
			}
			@if ($minMD <= $valueMd4) {
				@media (max-width: $md3) {
					#{$name}: ($start - ($width - $valueMd4) * $pointScale) + $val;
				}
				@if ($minMD <= $valueMd5) {
					@media (max-width: $md4) {
						#{$name}: ($start - ($width - $valueMd5) * $pointScale) + $val;
					}
					@if ($minMD <= $minWidth) {
						@media (max-width: $md5) {
							#{$name}: ($start - ($width - $minWidth) * $pointScale) + $val;
						}
					}
				} @else if ($minMD > $valueMd5) {
					@media (max-width: $md4) {
						#{$name}: ($start - ($width - $minMD) * $pointScale) + $val;
					}
				}
			} @else if ($minMD > $valueMd4) {
				@media (max-width: $md3) {
					#{$name}: ($start - ($width - $minMD) * $pointScale) + $val;
				}
			}
			//*
		} @else if (($width > $valueMd4) and ($minMD <= $valueMd4)) {
			@media (max-width: $md1) {
				#{$name}: ($start - ($width - $valueMd4) * $pointScale) + $val;
			}
			@if ($minMD <= $valueMd5) {
				@media (max-width: $md4) {
					#{$name}: ($start - ($width - $valueMd5) * $pointScale) + $val;
				}
				@if ($minMD <= $minWidth) {
					@media (max-width: $md5) {
						#{$name}: ($start - ($width - $minWidth) * $pointScale) + $val;
					}
				}
			} @else if ($minMD > $valueMd5) {
				@media (max-width: $md4) {
					#{$name}: ($start - ($width - $minMD) * $pointScale) + $val;
				}
			}
		} @else if (($width > $valueMd5) and ($minMD <= $valueMd5)) {
			@media (max-width: $md1) {
				#{$name}: ($start - ($width - $valueMd5) * $pointScale) + $val;
			}
			@if ($minMD <= $minWidth) {
				@media (max-width: $md5) {
					#{$name}: ($start - ($width - $minWidth) * $pointScale) + $val;
				}
			}
		}
	}
}
